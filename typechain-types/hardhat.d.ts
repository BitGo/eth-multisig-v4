/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Ownable2Step",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable2Step__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "ERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155__factory>;
    getContractFactory(
      name: "IERC1155MetadataURI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155MetadataURI__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC1155Holder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Holder__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "Address",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Address__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Math",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Math__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "Strings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Strings__factory>;
    getContractFactory(
      name: "Batcher",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Batcher__factory>;
    getContractFactory(
      name: "ArbethWalletSimple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbethWalletSimple__factory>;
    getContractFactory(
      name: "CeloWalletSimple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CeloWalletSimple__factory>;
    getContractFactory(
      name: "EtcWalletSimple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EtcWalletSimple__factory>;
    getContractFactory(
      name: "OpethWalletSimple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OpethWalletSimple__factory>;
    getContractFactory(
      name: "PolygonWalletSimple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PolygonWalletSimple__factory>;
    getContractFactory(
      name: "RskWalletSimple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RskWalletSimple__factory>;
    getContractFactory(
      name: "ZkethWalletSimple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZkethWalletSimple__factory>;
    getContractFactory(
      name: "ERC20Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Interface__factory>;
    getContractFactory(
      name: "Forwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Forwarder__factory>;
    getContractFactory(
      name: "ForwarderFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ForwarderFactory__factory>;
    getContractFactory(
      name: "ForwarderFactoryV4",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ForwarderFactoryV4__factory>;
    getContractFactory(
      name: "ForwarderV4",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ForwarderV4__factory>;
    getContractFactory(
      name: "IForwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IForwarder__factory>;
    getContractFactory(
      name: "IForwarderV4",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IForwarderV4__factory>;
    getContractFactory(
      name: "RecoveryWalletFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RecoveryWalletFactory__factory>;
    getContractFactory(
      name: "RecoveryWalletSimple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RecoveryWalletSimple__factory>;
    getContractFactory(
      name: "AlwaysFalseERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AlwaysFalseERC165__factory>;
    getContractFactory(
      name: "BlacklistedToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlacklistedToken__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Fail",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Fail__factory>;
    getContractFactory(
      name: "FixedSupplyToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FixedSupplyToken__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ForwarderTarget",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ForwarderTarget__factory>;
    getContractFactory(
      name: "GasGuzzler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GasGuzzler__factory>;
    getContractFactory(
      name: "GasHeavy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GasHeavy__factory>;
    getContractFactory(
      name: "MockERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC1155__factory>;
    getContractFactory(
      name: "MockERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC721__factory>;
    getContractFactory(
      name: "Reentry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Reentry__factory>;
    getContractFactory(
      name: "ReentryForwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentryForwarder__factory>;
    getContractFactory(
      name: "ReentryWalletSimple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentryWalletSimple__factory>;
    getContractFactory(
      name: "TestBatcherDriver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestBatcherDriver__factory>;
    getContractFactory(
      name: "BasicToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasicToken__factory>;
    getContractFactory(
      name: "BlackList",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlackList__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Basic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Basic__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "StandardToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardToken__factory>;
    getContractFactory(
      name: "TetherToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TetherToken__factory>;
    getContractFactory(
      name: "UpgradedStandardToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradedStandardToken__factory>;
    getContractFactory(
      name: "WalletFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WalletFactory__factory>;
    getContractFactory(
      name: "WalletSimple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WalletSimple__factory>;

    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Ownable2Step",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable2Step>;
    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "ERC1155",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155>;
    getContractAt(
      name: "IERC1155MetadataURI",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155MetadataURI>;
    getContractAt(
      name: "IERC1155",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC1155Holder",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Holder>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SafeERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "ERC721",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "Address",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Address>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Math",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Math>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "Strings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Strings>;
    getContractAt(
      name: "Batcher",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Batcher>;
    getContractAt(
      name: "ArbethWalletSimple",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbethWalletSimple>;
    getContractAt(
      name: "CeloWalletSimple",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CeloWalletSimple>;
    getContractAt(
      name: "EtcWalletSimple",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EtcWalletSimple>;
    getContractAt(
      name: "OpethWalletSimple",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OpethWalletSimple>;
    getContractAt(
      name: "PolygonWalletSimple",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PolygonWalletSimple>;
    getContractAt(
      name: "RskWalletSimple",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RskWalletSimple>;
    getContractAt(
      name: "ZkethWalletSimple",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ZkethWalletSimple>;
    getContractAt(
      name: "ERC20Interface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Interface>;
    getContractAt(
      name: "Forwarder",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Forwarder>;
    getContractAt(
      name: "ForwarderFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ForwarderFactory>;
    getContractAt(
      name: "ForwarderFactoryV4",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ForwarderFactoryV4>;
    getContractAt(
      name: "ForwarderV4",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ForwarderV4>;
    getContractAt(
      name: "IForwarder",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IForwarder>;
    getContractAt(
      name: "IForwarderV4",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IForwarderV4>;
    getContractAt(
      name: "RecoveryWalletFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RecoveryWalletFactory>;
    getContractAt(
      name: "RecoveryWalletSimple",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RecoveryWalletSimple>;
    getContractAt(
      name: "AlwaysFalseERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AlwaysFalseERC165>;
    getContractAt(
      name: "BlacklistedToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BlacklistedToken>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Fail",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Fail>;
    getContractAt(
      name: "FixedSupplyToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FixedSupplyToken>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ForwarderTarget",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ForwarderTarget>;
    getContractAt(
      name: "GasGuzzler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GasGuzzler>;
    getContractAt(
      name: "GasHeavy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GasHeavy>;
    getContractAt(
      name: "MockERC1155",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC1155>;
    getContractAt(
      name: "MockERC721",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC721>;
    getContractAt(
      name: "Reentry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Reentry>;
    getContractAt(
      name: "ReentryForwarder",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentryForwarder>;
    getContractAt(
      name: "ReentryWalletSimple",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentryWalletSimple>;
    getContractAt(
      name: "TestBatcherDriver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestBatcherDriver>;
    getContractAt(
      name: "BasicToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BasicToken>;
    getContractAt(
      name: "BlackList",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BlackList>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Basic",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Basic>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "StandardToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StandardToken>;
    getContractAt(
      name: "TetherToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TetherToken>;
    getContractAt(
      name: "UpgradedStandardToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradedStandardToken>;
    getContractAt(
      name: "WalletFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WalletFactory>;
    getContractAt(
      name: "WalletSimple",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WalletSimple>;

    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "Ownable2Step",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable2Step>;
    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC1155",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1155>;
    deployContract(
      name: "IERC1155MetadataURI",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155MetadataURI>;
    deployContract(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155>;
    deployContract(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Receiver>;
    deployContract(
      name: "ERC1155Holder",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1155Holder>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721>;
    deployContract(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Metadata>;
    deployContract(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Receiver>;
    deployContract(
      name: "Address",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "Math",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Math>;
    deployContract(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "Strings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "Batcher",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Batcher>;
    deployContract(
      name: "ArbethWalletSimple",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ArbethWalletSimple>;
    deployContract(
      name: "CeloWalletSimple",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CeloWalletSimple>;
    deployContract(
      name: "EtcWalletSimple",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EtcWalletSimple>;
    deployContract(
      name: "OpethWalletSimple",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OpethWalletSimple>;
    deployContract(
      name: "PolygonWalletSimple",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PolygonWalletSimple>;
    deployContract(
      name: "RskWalletSimple",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RskWalletSimple>;
    deployContract(
      name: "ZkethWalletSimple",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ZkethWalletSimple>;
    deployContract(
      name: "ERC20Interface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Interface>;
    deployContract(
      name: "Forwarder",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Forwarder>;
    deployContract(
      name: "ForwarderFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ForwarderFactory>;
    deployContract(
      name: "ForwarderFactoryV4",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ForwarderFactoryV4>;
    deployContract(
      name: "ForwarderV4",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ForwarderV4>;
    deployContract(
      name: "IForwarder",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IForwarder>;
    deployContract(
      name: "IForwarderV4",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IForwarderV4>;
    deployContract(
      name: "RecoveryWalletFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RecoveryWalletFactory>;
    deployContract(
      name: "RecoveryWalletSimple",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RecoveryWalletSimple>;
    deployContract(
      name: "AlwaysFalseERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AlwaysFalseERC165>;
    deployContract(
      name: "BlacklistedToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BlacklistedToken>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "Fail",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Fail>;
    deployContract(
      name: "FixedSupplyToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FixedSupplyToken>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ForwarderTarget",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ForwarderTarget>;
    deployContract(
      name: "GasGuzzler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GasGuzzler>;
    deployContract(
      name: "GasHeavy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GasHeavy>;
    deployContract(
      name: "MockERC1155",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockERC1155>;
    deployContract(
      name: "MockERC721",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockERC721>;
    deployContract(
      name: "Reentry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Reentry>;
    deployContract(
      name: "ReentryForwarder",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentryForwarder>;
    deployContract(
      name: "ReentryWalletSimple",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentryWalletSimple>;
    deployContract(
      name: "TestBatcherDriver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestBatcherDriver>;
    deployContract(
      name: "BasicToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasicToken>;
    deployContract(
      name: "BlackList",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BlackList>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Basic",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Basic>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "StandardToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StandardToken>;
    deployContract(
      name: "TetherToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TetherToken>;
    deployContract(
      name: "UpgradedStandardToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpgradedStandardToken>;
    deployContract(
      name: "WalletFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WalletFactory>;
    deployContract(
      name: "WalletSimple",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WalletSimple>;

    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "Ownable2Step",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable2Step>;
    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC1155",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1155>;
    deployContract(
      name: "IERC1155MetadataURI",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155MetadataURI>;
    deployContract(
      name: "IERC1155",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155>;
    deployContract(
      name: "IERC1155Receiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Receiver>;
    deployContract(
      name: "ERC1155Holder",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1155Holder>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "ERC721",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721>;
    deployContract(
      name: "IERC721Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Metadata>;
    deployContract(
      name: "IERC721",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "IERC721Receiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Receiver>;
    deployContract(
      name: "Address",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "Math",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Math>;
    deployContract(
      name: "ReentrancyGuard",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "Strings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "Batcher",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Batcher>;
    deployContract(
      name: "ArbethWalletSimple",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ArbethWalletSimple>;
    deployContract(
      name: "CeloWalletSimple",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CeloWalletSimple>;
    deployContract(
      name: "EtcWalletSimple",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EtcWalletSimple>;
    deployContract(
      name: "OpethWalletSimple",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OpethWalletSimple>;
    deployContract(
      name: "PolygonWalletSimple",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PolygonWalletSimple>;
    deployContract(
      name: "RskWalletSimple",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RskWalletSimple>;
    deployContract(
      name: "ZkethWalletSimple",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ZkethWalletSimple>;
    deployContract(
      name: "ERC20Interface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Interface>;
    deployContract(
      name: "Forwarder",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Forwarder>;
    deployContract(
      name: "ForwarderFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ForwarderFactory>;
    deployContract(
      name: "ForwarderFactoryV4",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ForwarderFactoryV4>;
    deployContract(
      name: "ForwarderV4",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ForwarderV4>;
    deployContract(
      name: "IForwarder",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IForwarder>;
    deployContract(
      name: "IForwarderV4",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IForwarderV4>;
    deployContract(
      name: "RecoveryWalletFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RecoveryWalletFactory>;
    deployContract(
      name: "RecoveryWalletSimple",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RecoveryWalletSimple>;
    deployContract(
      name: "AlwaysFalseERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AlwaysFalseERC165>;
    deployContract(
      name: "BlacklistedToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BlacklistedToken>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "Fail",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Fail>;
    deployContract(
      name: "FixedSupplyToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FixedSupplyToken>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ForwarderTarget",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ForwarderTarget>;
    deployContract(
      name: "GasGuzzler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GasGuzzler>;
    deployContract(
      name: "GasHeavy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GasHeavy>;
    deployContract(
      name: "MockERC1155",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockERC1155>;
    deployContract(
      name: "MockERC721",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockERC721>;
    deployContract(
      name: "Reentry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Reentry>;
    deployContract(
      name: "ReentryForwarder",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentryForwarder>;
    deployContract(
      name: "ReentryWalletSimple",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentryWalletSimple>;
    deployContract(
      name: "TestBatcherDriver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestBatcherDriver>;
    deployContract(
      name: "BasicToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasicToken>;
    deployContract(
      name: "BlackList",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BlackList>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Basic",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Basic>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "StandardToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StandardToken>;
    deployContract(
      name: "TetherToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TetherToken>;
    deployContract(
      name: "UpgradedStandardToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpgradedStandardToken>;
    deployContract(
      name: "WalletFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WalletFactory>;
    deployContract(
      name: "WalletSimple",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WalletSimple>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
